type Product @model {
  id: ID!
  variants: [Variant] @hasMany(indexName: "byProduct", fields: ["id"])
  categoryID: ID! @index(name: "byCategory")
  category: Category @belongsTo(fields: ["categoryID"])
  brandID: ID @index(name: "byBrand")
  brand: Brand @belongsTo(fields: ["brandID"])
}

type Variant @model {
  id: ID!
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields:["productID"])
  optionValues: [OptionValue] @hasMany(indexName: "byVariant", fields: ["id"])
}

type CartProduct @model {
  id: ID!
  userID: ID! @index(name: "byUser")
  user: User! @belongsTo(fields: ["userID"])
  option: String
  productID: ID! @index(name: "byProduct")
  product: Product @hasOne(fields: ["productID"])
}

type OrderProduct @model {
  id: ID!
  quantity: Int!
  option: String
  productID: ID! @index
  product: Product @hasOne(fields: ["productID"])
  orderID: ID! @index(name: "byOrder")
  order: Order @belongsTo(fields: ["orderID"])
}

type Order @model {
  id: ID!
  userID: ID! @index(name: "byUser", sortKeyFields:[""])
  user: User @belongsTo(fields: ["userID"])
  orderProducts: [OrderProduct] @hasMany(indexName: "byOrder", fields: ["id"])
  address: Address @hasOne
}

type User @model {
  id: ID!
  carts: [CartProduct] @hasMany(indexName: "byUser", fields: ["id"])
  orders: [Order] @hasMany(indexName: "byUser", fields: ["id"] )
  addresses: [Address] @hasMany(indexName: "byUser", fields: ["id"])
  sub: string
}

type Address @model {
  id: ID!
  address: String!
  subaddress: String
  city: String!
  country: Country!
  fullAddress: String!
  lat: Float
  lng: Float
  location: String
  postcode: String
  state: String
  user: User @belongsTo(fields: ["userID"])
  userID: ID @index(name: "byUser")
  isSelected: Boolean
}

type Brand @model {
  id: iD!
  name: String!
  logo: String
  products: [Product] @hasMany(indexName: "byBrand", fields: ["id"])
}

type Category @model {
  id: ID!
  products: [Product] @hasMany(indexName: "byCategory", fields: ["id"])
  googleCategory: String
  maxPurchaseQuantity: Int
  minPurchaseQuantity: Int
  prototypeID: ID @index
  prototype: Prototype @hasOne(fields: ["prototypeID"])
}

type Prototype @model {
  id: ID!
  name: String! 
  category: Category @belongsTo
  optionTypes: [OptionType] @manyToMany(relationName: "OptionPrototype")
}

type OptionType @model {
  id: ID!
  name: String!
  value: String
  placeholder: String
  label: String
  typeValue: String
  purpose: PurposeEnum
  validations: [Validation]
  optionValues: [OptionValue] @hasMany(indexName: "byOptionType", fields: ["id"] )
  prototypes: [Prototype] @manyToMany(relationName: "OptionPrototype")
}

enum PurposeEnum {
  VARIANT
  FEATURE
  PRODUCT_DETAILS_TEXT
  PRODUCT_DETAILS_SELECT
}

type Validation {
  type: ValidationEnum
  value: String!
  message: String!
}

enum ValidationEnum {
  REQUIRED
  IS_EMAIL
  MIN_LENGTH
  MAX_LENGTH
  IS_TRUE
}

type OptionValue @model {
  id: ID!
  optionTypeID: ID! @index(name: "byOptionType", sortKeyFields:[""] )
  optionType: OptionType @belongsTo(fields: ["optionTypeID"])
  name: String
  variantID: ID @index(fields: "byVariant")
  variant: Variant @belongsTo(fields: "variantID")
}
